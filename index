<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OrbitingIdeas - Simulator Lab</title>
    <script src="https://cdn.jsdelivr.net/pyodide/v0.26.1/full/pyodide.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.138.3/build/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.138.3/examples/js/loaders/GLTFLoader.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.138.3/examples/js/controls/OrbitControls.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Share+Tech+Mono&display=swap" rel="stylesheet">
    <script src="https://unpkg.com/lucide@0.378.0/dist/umd/lucide.min.js"></script>
    <style>
        body { font-family: 'Share Tech Mono', monospace; background-color: #0A0F1A; color: #E0E0E0; overflow: hidden; }
        .glassmorphism { background: rgba(12, 20, 39, 0.6); backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px); border: 1px solid rgba(0, 190, 255, 0.2); box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1); }
        .active-simulator { background-color: #00BEFF; color: #0A0F1A; border-left-width: 4px; border-left-color: #80DFFF; }
        .active-simulator:hover { background-color: #00A5DF; }
        .simulator-item:hover { background-color: #1A2C47; border-left-color: #00BEFF; }
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: #0A0F1A; }
        ::-webkit-scrollbar-thumb { background: #007BFF; border-radius: 4px; }
        ::-webkit-scrollbar-thumb:hover { background: #0056b3; }
        .telemetry-value { color: #00BEFF; font-weight: bold; }
        .control-panel input[type="range"] { -webkit-appearance: none; appearance: none; width: 100%; height: 8px; background: #1A2C47; outline: none; opacity: 0.9; transition: opacity .2s; border-radius: 4px; }
        .control-panel input[type="range"]:hover { opacity: 1; }
        .control-panel input[type="range"]::-webkit-slider-thumb { -webkit-appearance: none; appearance: none; width: 20px; height: 20px; background: #00BEFF; cursor: pointer; border-radius: 50%; border: 2px solid #0A0F1A; }
        .control-panel input[type="range"]::-moz-range-thumb { width: 20px; height: 20px; background: #00BEFF; cursor: pointer; border-radius: 50%; border: 2px solid #0A0F1A; }
        .btn-primary { background-color: #007BFF; color: white; transition: background-color 0.3s ease; border: 1px solid #0056b3; }
        .btn-primary:hover { background-color: #0056b3; }
        .status-indicator { width: 10px; height: 10px; border-radius: 50%; display: inline-block; margin-right: 8px; }
        .status-online { background-color: #39FF14; }
        .status-offline { background-color: #FF3131; }
        .status-standby { background-color: #FFFF33; }
        .error-message-area { background-color: rgba(255, 49, 49, 0.1); border: 1px solid rgba(255, 49, 49, 0.3); color: #FF8A8A; padding: 8px; border-radius: 4px; margin-top: 10px; font-size: 0.8rem; max-height: 100px; overflow-y: auto; }
        .loading-overlay { position: absolute; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(10, 15, 26, 0.8); z-index: 50; display: flex; flex-direction: column; align-items: center; justify-content: center; }
        .loading-text { color: #00BEFF; margin-top: 10px; font-size: 1.2em; }
        .spinner { border: 4px solid rgba(0, 190, 255, 0.2); border-left-color: #00BEFF; border-radius: 50%; width: 40px; height: 40px; animation: spin 1s linear infinite; }
        @keyframes spin { to { transform: rotate(360deg); } }
    </style>
</head>
<body class="flex flex-col h-screen">

    <header class="bg-black/30 glassmorphism text-white p-3 shadow-lg border-b border-blue-500/30 flex items-center justify-between">
        <div class="flex items-center space-x-4">
            <i data-lucide="orbit" class="text-blue-400 h-8 w-8"></i>
            <h1 class="text-2xl tracking-wider">ORBITINGIDEAS SIMULATOR LAB</h1>
            <a href="https://www.orbitingideas.com"
            class="px-3 py-1 text-sm bg-blue-500 hover:bg-blue-600 text-white rounded-md border border-blue-400 shadow transition-all duration-200">
                ‚Üê Back
            </a>
        </div>
        <div class="flex items-center text-sm">
            <span class="mr-2">SIM ENGINE:</span>
            <span id="connectionIndicator" class="status-indicator status-standby"></span>
            <span id="connectionStatus" class="text-yellow-400">AWAITING SELECTION</span>
        </div>
    </header>

    <main class="flex-grow flex overflow-hidden">
        <aside class="w-1/5 glassmorphism p-4 space-y-3 overflow-y-auto border-r border-blue-500/30">
            <h2 class="text-lg font-semibold text-blue-300 mb-3 border-b border-blue-400/50 pb-2">SIMULATORS</h2>
            <div id="simulatorList"></div>
        </aside>

        <section id="simulationViewport" class="flex-grow w-3/5 bg-black/50 flex flex-col items-center justify-center relative overflow-hidden p-2">
            <div id="viewportPlaceholder" class="text-center text-gray-500">
                <i data-lucide="scan-eye" class="h-24 w-24 mx-auto mb-4"></i>
                <p class="text-xl">SIMULATION VIEWER OFFLINE</p>
                <p>Select a simulator to initialize.</p>
            </div>
            <canvas id="simulationCanvas" class="hidden w-full h-full"></canvas>
            <div id="loadingOverlay" class="loading-overlay hidden">
                <div class="spinner"></div>
                <p id="loadingStatusText" class="loading-text">Loading Simulation Environment...</p>
            </div>
        </section>

        <aside class="w-1/5 glassmorphism p-4 space-y-4 overflow-y-auto border-l border-blue-500/30">
            <div id="simulatorControlsContainer">
                <h2 class="text-lg font-semibold text-blue-300 mb-3 border-b border-blue-400/50 pb-2">CONTROLS</h2>
                <div id="controlsPlaceholder" class="text-gray-500 text-sm">
                    <i data-lucide="sliders-horizontal" class="h-6 w-6 mx-auto mb-2"></i>
                    <p>Controls will appear here.</p>
                </div>
                <div id="activeControls" class="hidden space-y-4 control-panel"></div>
                
                <!-- Parameter Manager Button -->
                <button id="openParameterManagerBtn" class="w-full btn-primary p-2 mt-3 flex items-center justify-center">
                    <i data-lucide="settings" class="mr-2 h-4 w-4"></i> Parameters
                </button>
            </div>

            <div id="telemetryContainer" class="mt-6">
                <h2 class="text-lg font-semibold text-blue-300 mb-3 border-b border-blue-400/50 pb-2">TELEMETRY</h2>
                <div id="telemetryPlaceholder" class="text-gray-500 text-sm">
                    <i data-lucide="activity" class="h-6 w-6 mx-auto mb-2"></i>
                    <p>Telemetry data will stream here.</p>
                </div>
                <div id="activeTelemetry" class="hidden space-y-2 text-sm"></div>
            </div>
            <div id="errorDisplayArea" class="error-message-area hidden">
                <h3 class="font-semibold text-red-300 text-sm mb-1">System Alerts:</h3>
                <div id="errorMessages"></div>
            </div>
        </aside>
    </main>

    <footer class="bg-black/50 text-xs text-center p-2 border-t border-blue-500/30 text-gray-500">
        &copy; <span id="currentYear"></span> OrbitingIdeas
    </footer>

    <!-- Parameter Manager Modal -->
    <div id="parameterManagerModal" class="fixed inset-0 z-50 hidden bg-black bg-opacity-60 flex items-center justify-center">
      <div class="bg-[#162032] p-6 rounded-xl shadow-2xl min-w-[350px] max-w-[95vw] w-full max-w-md">
        <div class="flex justify-between items-center mb-3">
          <h2 class="text-lg font-bold text-blue-200">Edit Simulation Parameters</h2>
          <button id="closeParameterManagerBtn" class="text-gray-400 hover:text-red-400 text-2xl">&times;</button>
        </div>
        <form id="parameterForm" class="space-y-3 max-h-72 overflow-y-auto"></form>
        <div class="flex gap-2 mt-4">
          <button id="addParameterBtn" class="btn-primary flex-1" type="button">+ Add Parameter</button>
          <button id="saveParametersBtn" class="btn-primary flex-1" type="button">Save</button>
        </div>
      </div>
    </div>

    <script>
        (function() {
            'use strict';

            const DEBUG_MODE = true;
            const SIM_DT = 0.02;
            const PYODIDE_PACKAGES = ['numpy', 'scipy']; // Common packages for Pyodide sims

            // Example SIMULATORS_CONFIG: customize as needed
            const SIMULATORS_CONFIG = [
                {
                    id: 'satellite_sim',
                    name: 'LEO Satellite Simulator',
                    icon: 'satellite-dish',
                    type: 'pyodide',
                    pythonScriptURL: './simulators/satellite_sim.py',
                    visualizerModuleURL: './visualizers/satellite_threejs.js',
                    initialState: {},
                    // Default parameters (hidden or advanced)
                    parameters: {
                        kp: 0.08,
                        ki: 0.0,
                        kd: 0.44,
                        q_desired: [1,0,0,0]
                    },
                    controls: [
                        {
                            id: 'kp',
                            label: 'Proportional Gain (Kp)',
                            type: 'range',
                            min: 0,
                            max: 10,
                            value: 0.08,
                            step: 0.01,
                            pyParameterName: 'kp'
                        },
                        {
                            id: "ki",
                            label: "Integral Gain (ki)",
                            type: "range",
                            min: 0.0,
                            max: 5.0,
                            step: 0.01,
                            value: 0.0,
                            pyParameterName: "ki"
                        },
                        {
                            id: 'kd',
                            label: 'Derivative Gain (Kd)',
                            type: 'range',
                            min: 0,
                            max: 10,
                            value: 0.44,
                            step: 0.01,
                            pyParameterName: 'kd'
                        },
                        {
                            id: "q_desired",
                            label: "Desired Attitude (Y, P, R)",
                            type: "vector4_euler",
                            default: [0, 0, 0],
                            pyParameterName: "q_desired"
                        }
                    ],
                    actions: [
                        {
                            id: 'reset_sim',
                            label: 'RESET ORBIT',
                            icon: 'refresh-cw',
                            pyActionId: 'reset_to_initial_config'
                        },
                        {
                            id: 'stop_sim',
                            label: 'STOP SIMULATION',
                            icon: 'square',
                            pyActionId: null
                        }
                    ],
                    telemetry: [
                        "Time (s)",
                        "Radius (m)",
                        "Latitude (deg)",
                        "Longitude (deg)",
                        "Radial Velocity (m/s)",
                        "Tangential Velocity (m/s)",
                        "Azimuth (deg)",
                        "quaternion",
                        "Position X (m)",
                        "Position Y (m)",
                        "Position Z (m)",
                        'Sim Step Time (ms)'
                    ]
                }
                // Add more simulators if needed
            ];

            let currentSimConfig = null;
            let currentPythonSimState = null;
            let animationFrameId = null;
            let lastSimStepTime = 0;
            let currentParameters = {}; // Holds parameters (scalars/vectors) for Parameter Manager

            // ... rest of your const DOMElements, log, UI, PyodideService, ThreeJSVisualizer ...
            // [Omitted for brevity - keep your existing code for these unchanged!]
            // (Paste the UI, PyodideService, ThreeJSVisualizer, App objects here as in your original file.)

            // DOMs
            const DOMElements = {
                simulatorList: document.getElementById('simulatorList'),
                viewportPlaceholder: document.getElementById('viewportPlaceholder'),
                simulationCanvas: document.getElementById('simulationCanvas'),
                controlsPlaceholder: document.getElementById('controlsPlaceholder'),
                activeControls: document.getElementById('activeControls'),
                telemetryPlaceholder: document.getElementById('telemetryPlaceholder'),
                activeTelemetry: document.getElementById('activeTelemetry'),
                connectionStatus: document.getElementById('connectionStatus'),
                connectionIndicator: document.getElementById('connectionIndicator'),
                errorDisplayArea: document.getElementById('errorDisplayArea'),
                errorMessages: document.getElementById('errorMessages'),
                currentYear: document.getElementById('currentYear'),
                loadingOverlay: document.getElementById('loadingOverlay'),
                loadingStatusText: document.getElementById('loadingStatusText')
            };

            // Your UI, PyodideService, ThreeJSVisualizer... [keep as before]

            // (Paste your existing UI, PyodideService, ThreeJSVisualizer, and App definitions here as in your main file)

            // PARAMETER MANAGER MODAL LOGIC

            function showParameterManager() {
                // Populate the form with current parameters
                const form = document.getElementById('parameterForm');
                form.innerHTML = '';
                Object.entries(currentParameters).forEach(([key, val], i) => {
                    const isVec = Array.isArray(val);
                    const input = isVec
                      ? `<input type="text" class="w-full p-1 text-black rounded" value="${val.join(',')}" data-type="vector">`
                      : `<input type="number" step="any" class="w-full p-1 text-black rounded" value="${val}" data-type="scalar">`;
                    form.innerHTML += `
                    <div class="flex items-center gap-2 mb-2">
                      <input type="text" class="p-1 text-black rounded w-24 font-mono border" value="${key}" data-param-name>
                      ${input}
                      <button type="button" class="text-red-400 hover:text-red-700 text-xl remove-param-btn" title="Delete">&times;</button>
                    </div>`;
                });
            }

            function hideParameterManager() {
                document.getElementById('parameterManagerModal').classList.add('hidden');
            }

            document.getElementById('openParameterManagerBtn').onclick = () => {
                showParameterManager();
                document.getElementById('parameterManagerModal').classList.remove('hidden');
            };
            document.getElementById('closeParameterManagerBtn').onclick = hideParameterManager;
            document.getElementById('parameterManagerModal').onclick = e => { if (e.target === e.currentTarget) hideParameterManager(); };

            document.getElementById('addParameterBtn').onclick = e => {
                e.preventDefault();
                // Add a new default scalar parameter
                currentParameters['param'+(Object.keys(currentParameters).length+1)] = 0;
                showParameterManager();
            };

            document.getElementById('parameterForm').onclick = e => {
                if (e.target.classList.contains('remove-param-btn')) {
                    const row = e.target.closest('div');
                    const name = row.querySelector('[data-param-name]').value.trim();
                    delete currentParameters[name];
                    showParameterManager();
                }
            };

            document.getElementById('saveParametersBtn').onclick = e => {
                e.preventDefault();
                // Collect all parameter entries
                const rows = document.querySelectorAll('#parameterForm > div');
                const newParams = {};
                rows.forEach(row => {
                    const key = row.querySelector('[data-param-name]').value.trim();
                    const input = row.querySelector('input:not([data-param-name])');
                    if (!key) return;
                    if (input.dataset.type === 'vector') {
                        const arr = input.value.split(',').map(v => parseFloat(v.trim())).filter(x => !isNaN(x));
                        newParams[key] = arr;
                    } else {
                        const val = parseFloat(input.value);
                        newParams[key] = isNaN(val) ? 0 : val;
                    }
                });
                currentParameters = newParams;
                // Push to Python sim, one by one
                Object.entries(currentParameters).forEach(([key, value]) => {
                    if (window.PyodideService && PyodideService.isReady)
                        PyodideService.callPython('set_simulation_parameter', [key, value]);
                });
                hideParameterManager();
            };

            // Merge parameters from config and controls on sim select/reset
            function initializeParametersFromConfig(simConfig) {
                // 1. From config.parameters
                currentParameters = simConfig.parameters ? { ...simConfig.parameters } : {};
                // 2. From controls
                if (simConfig.controls) {
                    simConfig.controls.forEach(ctrl => {
                        if (ctrl.pyParameterName) {
                            const val = ctrl.value ?? ctrl.default ?? 0;
                            currentParameters[ctrl.pyParameterName] = val;
                        }
                    });
                }
            }

            // --- Patch App object to use this logic ---
            // Paste your original App definition here but replace handleSimulatorSelection with the following version:

            const App = {
                isSimRunning: false,

                init: function() {
                    UI.init();
                    UI.populateSimulatorList(SIMULATORS_CONFIG, this.handleSimulatorSelection.bind(this));
                    UI.updateEngineStatus('AWAITING SELECTION', 'yellow', 'status-standby');
                },

                handleSimulatorSelection: async function(simConfig) {
                    if (animationFrameId) cancelAnimationFrame(animationFrameId);
                    this.isSimRunning = false;
                    currentPythonSimState = null;
                    currentSimConfig = simConfig;

                    UI.updateSimulatorSelectionDisplay(simConfig.name);
                    UI.showSimulationView();
                    UI.populateControls(simConfig, this.handleActionTrigger.bind(this), this.handleControlUpdate.bind(this));
                    UI.populateTelemetry(simConfig);

                    if(simConfig.visualizerModuleURL){
                        await ThreeJSVisualizer.init(DOMElements.simulationCanvas, simConfig.visualizerModuleURL);
                    } else {
                        ThreeJSVisualizer.dispose();
                        UI.displayError("No visualizer module specified for this simulator.");
                    }

                    if (simConfig.type === 'pyodide') {
                        if (!simConfig.pythonScriptURL) { UI.displayError("Pyodide sim config missing 'pythonScriptURL'"); return; }

                        const pyodideReady = await PyodideService.init(simConfig.pythonScriptURL);
                        if (!pyodideReady) { UI.displayError("Failed to init Pyodide for " + simConfig.name); return; }

                        const setupResult = PyodideService.callPython('setup_simulation', [simConfig.initialState || {}]);

                        // --- Load parameters (from config and controls), push to Python ---
                        initializeParametersFromConfig(simConfig);
                        Object.entries(currentParameters).forEach(([k, v]) => {
                            PyodideService.callPython('set_simulation_parameter', [k, v]);
                        });

                        this.isSimRunning = true;
                        lastSimStepTime = performance.now();
                        this.runClientSideSimulationLoop();
                    } else {
                        UI.displayError("Unknown simulator type: " + simConfig.type);
                        UI.updateEngineStatus('TYPE_UNKNOWN', 'red', 'status-offline');
                    }
                },

                // ... rest of App object unchanged ...
                runClientSideSimulationLoop: function() {
                    if (!this.isSimRunning || !currentSimConfig || currentSimConfig.type !== 'pyodide') {
                        if (animationFrameId) cancelAnimationFrame(animationFrameId);
                        animationFrameId = null;
                        return;
                    }
                    const currentTime = performance.now();
                    lastSimStepTime = currentTime;
                    const pythonResult = PyodideService.callPython('update_simulation_step', [SIM_DT, {}]);
                    if (pythonResult) {
                        currentPythonSimState = pythonResult;
                        this.handlePythonSimState(pythonResult);
                    }
                    const stepTimeMs = performance.now() - currentTime;
                    UI.updateTelemetryDisplay(currentSimConfig.id, {'Sim Step Time (ms)': stepTimeMs.toFixed(1)});
                    animationFrameId = requestAnimationFrame(this.runClientSideSimulationLoop.bind(this));
                },

                handlePythonSimState: function(state) {
                    if (!state || !currentSimConfig) return;
                    ThreeJSVisualizer.updateState(state);
                    UI.updateTelemetryDisplay(currentSimConfig.id, state);
                },

                handleControlUpdate: function(simId, controlId, value, pyParameterName) {
                    if (currentSimConfig && currentSimConfig.id === simId && currentSimConfig.type === 'pyodide') {
                        if (pyParameterName) {
                            PyodideService.callPython('set_simulation_parameter', [pyParameterName, value]);
                            // Sync in our param state too:
                            currentParameters[pyParameterName] = value;
                        }
                    }
                },

                handleActionTrigger: function(simId, actionId, pyActionId, pyActionParams) {
                    if (actionId === 'stop_sim') {
                        if (animationFrameId) cancelAnimationFrame(animationFrameId);
                        animationFrameId = null;
                        this.isSimRunning = false;
                        UI.updateEngineStatus('STOPPED', 'red', 'status-offline');
                        return;
                    }
                    if (currentSimConfig && currentSimConfig.id === simId && currentSimConfig.type === 'pyodide') {
                        if (pyActionId) {
                            PyodideService.callPython('handle_action_command', [pyActionId, pyActionParams || {}]);
                            if (pyActionId.toLowerCase().includes('reset')) {
                                UI.updateEngineStatus('READY', 'green', 'status-online');
                                PyodideService.callPython('setup_simulation', [currentSimConfig.initialState || {}]);
                                initializeParametersFromConfig(currentSimConfig);
                                Object.entries(currentParameters).forEach(([k, v]) => {
                                    PyodideService.callPython('set_simulation_parameter', [k, v]);
                                });
                                if (!this.isSimRunning) {
                                   this.isSimRunning = true;
                                   lastSimStepTime = performance.now();
                                   this.runClientSideSimulationLoop();
                                }
                            }
                        }
                    }
                }
            };

            // --- (keep UI, PyodideService, ThreeJSVisualizer as in your current version) ---

            document.addEventListener('DOMContentLoaded', () => App.init());
        })();
    </script>
</body>
</html>
